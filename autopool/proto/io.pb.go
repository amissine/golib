// Code generated by protoc-gen-go. DO NOT EDIT.
// source: io.proto

package input

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Input is the standard name for a Cog's input.
type Input struct {
	First                string   `protobuf:"bytes,1,opt,name=first,proto3" json:"first,omitempty"`
	Last                 string   `protobuf:"bytes,2,opt,name=last,proto3" json:"last,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Input) Reset()         { *m = Input{} }
func (m *Input) String() string { return proto.CompactTextString(m) }
func (*Input) ProtoMessage()    {}
func (*Input) Descriptor() ([]byte, []int) {
	return fileDescriptor_75b0773ef7c1937b, []int{0}
}

func (m *Input) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Input.Unmarshal(m, b)
}
func (m *Input) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Input.Marshal(b, m, deterministic)
}
func (m *Input) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Input.Merge(m, src)
}
func (m *Input) XXX_Size() int {
	return xxx_messageInfo_Input.Size(m)
}
func (m *Input) XXX_DiscardUnknown() {
	xxx_messageInfo_Input.DiscardUnknown(m)
}

var xxx_messageInfo_Input proto.InternalMessageInfo

func (m *Input) GetFirst() string {
	if m != nil {
		return m.First
	}
	return ""
}

func (m *Input) GetLast() string {
	if m != nil {
		return m.Last
	}
	return ""
}

// Output is the standard name for a Cog's output.
type Output struct {
	Id                   uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Payload              []byte   `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Output) Reset()         { *m = Output{} }
func (m *Output) String() string { return proto.CompactTextString(m) }
func (*Output) ProtoMessage()    {}
func (*Output) Descriptor() ([]byte, []int) {
	return fileDescriptor_75b0773ef7c1937b, []int{1}
}

func (m *Output) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Output.Unmarshal(m, b)
}
func (m *Output) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Output.Marshal(b, m, deterministic)
}
func (m *Output) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Output.Merge(m, src)
}
func (m *Output) XXX_Size() int {
	return xxx_messageInfo_Output.Size(m)
}
func (m *Output) XXX_DiscardUnknown() {
	xxx_messageInfo_Output.DiscardUnknown(m)
}

var xxx_messageInfo_Output proto.InternalMessageInfo

func (m *Output) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Output) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func init() {
	proto.RegisterType((*Input)(nil), "input.Input")
	proto.RegisterType((*Output)(nil), "input.Output")
}

func init() { proto.RegisterFile("io.proto", fileDescriptor_75b0773ef7c1937b) }

var fileDescriptor_75b0773ef7c1937b = []byte{
	// 156 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xc8, 0xcc, 0xd7, 0x2b,
	0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0xcd, 0xcc, 0x2b, 0x28, 0x2d, 0x51, 0x32, 0xe4, 0x62, 0xf5,
	0x04, 0x31, 0x84, 0x44, 0xb8, 0x58, 0xd3, 0x32, 0x8b, 0x8a, 0x4b, 0x24, 0x18, 0x15, 0x18, 0x35,
	0x38, 0x83, 0x20, 0x1c, 0x21, 0x21, 0x2e, 0x96, 0x9c, 0xc4, 0xe2, 0x12, 0x09, 0x26, 0xb0, 0x20,
	0x98, 0xad, 0x64, 0xc4, 0xc5, 0xe6, 0x5f, 0x5a, 0x02, 0xd2, 0xc3, 0xc7, 0xc5, 0x94, 0x99, 0x02,
	0xd6, 0xc0, 0x12, 0xc4, 0x94, 0x99, 0x22, 0x24, 0xc1, 0xc5, 0x5e, 0x90, 0x58, 0x99, 0x93, 0x9f,
	0x98, 0x02, 0xd6, 0xc0, 0x13, 0x04, 0xe3, 0x1a, 0x19, 0x73, 0x71, 0x04, 0xa5, 0x26, 0xe7, 0x17,
	0xa5, 0xa4, 0x16, 0x09, 0xa9, 0x73, 0xb1, 0x41, 0xd8, 0x42, 0x3c, 0x7a, 0x60, 0x47, 0xe8, 0x81,
	0x5d, 0x20, 0xc5, 0x0b, 0xe5, 0x41, 0x0c, 0x57, 0x62, 0x48, 0x62, 0x03, 0xbb, 0xd4, 0x18, 0x10,
	0x00, 0x00, 0xff, 0xff, 0xb5, 0xe3, 0xe2, 0x9a, 0xb5, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RecorderClient is the client API for Recorder service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RecorderClient interface {
	Record(ctx context.Context, in *Input, opts ...grpc.CallOption) (*Output, error)
}

type recorderClient struct {
	cc *grpc.ClientConn
}

func NewRecorderClient(cc *grpc.ClientConn) RecorderClient {
	return &recorderClient{cc}
}

func (c *recorderClient) Record(ctx context.Context, in *Input, opts ...grpc.CallOption) (*Output, error) {
	out := new(Output)
	err := c.cc.Invoke(ctx, "/input.Recorder/Record", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RecorderServer is the server API for Recorder service.
type RecorderServer interface {
	Record(context.Context, *Input) (*Output, error)
}

func RegisterRecorderServer(s *grpc.Server, srv RecorderServer) {
	s.RegisterService(&_Recorder_serviceDesc, srv)
}

func _Recorder_Record_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecorderServer).Record(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/input.Recorder/Record",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecorderServer).Record(ctx, req.(*Input))
	}
	return interceptor(ctx, in, info, handler)
}

var _Recorder_serviceDesc = grpc.ServiceDesc{
	ServiceName: "input.Recorder",
	HandlerType: (*RecorderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Record",
			Handler:    _Recorder_Record_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "io.proto",
}
